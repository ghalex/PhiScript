<View width="100%"
	  height="100%"
	  onCreationComplete="creationComplete()"
	  horizontalAlign="center">
	
	<Import className="renderers.TaskItemRenderer" />
	<Import className="renderers.PriorityItemRenderer" />
		
	<VBox horizontalAlign="center" gap="10">
		<Image source="assets/images/todo.png" paddingBottom="20"/>
		
		<HBox gap="4">
			<TextInput id="itemNameTi"
					   width="160"
					   onEnter="addTask()" 
					   text="{this.tasksList.selectedItem.label}"/>
					   
			<Button text="Add task"
				    onClick="addTask()" />

			<Button text="Edit" 
					style="primary" 
					enabled="{this.tasksList.selectedItem}"
					onClick="editTask()" />
					
			<Button text="Delete" 
					style="danger" 
					onClick="deleteTask()"
					enabled="{this.tasksList.selectedItem}" />
		</HBox>
		
		<List id="tasksList" 
			  width="400"
			  height="400"
			  itemRendererFunction="this.rendererFunction"
			  dataProvider="{this.data.tasks}">
			
			<dataProvider>
				<Array>
					<Model name="Task1" isDone="false" />
					<Model name="Create list" isDone="false" />
				</Array>
			</dataProvider>
			
		</List>
		
		<HBox gap="4">
			<Button text="Logout!" onClick="logout()" style="success" />
			
		</HBox>	  
		
	</VBox>
	
	<JavaScript>
		
		messages: {
			deleteTask: 'onDeleteTask',
		},
		
		rendererFunction: function( item )
		{
			if( item.get('type') === 'priority' )
				return PriorityItemRenderer;
				
			return TaskItemRenderer;
		},
		
		creationComplete: function()
		{
			this.setData({tasks: this.buildTasks() });
		},
		
		buildTasks: function()
		{
			var tasks = new phi.collections.ArrayCollection();
			
			tasks.useProxyObjects( true ); // this will change addItem to addItem( new phi.core.ProxyObject( {label:"Task1"} ))
			tasks.addItem( {label: "High:"} );
			tasks.addItem( {label: "Task1"} );
			tasks.addItem( {label: "Create a list"} );
			tasks.addItem( {label: "Low:"} );
			tasks.addItem( {label: "Sheet"} );
			
			return tasks;
		},
		
		logout: function()
		{
			this.sendMessage("logout");
		},
		
		addTask: function()
		{
			var tasks = this.tasksList.getDataProvider();
			var index = this.tasksList.getChildren().length;
			
			if( this.tasksList.getSelectedIndex() > -1 )
				index = this.tasksList.getSelectedIndex() + 1;
				
			tasks.addItemAt( {label: this.itemNameTi.getText()}, index);
			this.itemNameTi.setText("");
		},
		
		editTask: function()
		{
			var selectedTask = this.tasksList.getSelectedItem();
			selectedTask.set({label: this.itemNameTi.getText() });
			
			//console.log( 'edit task' );
		},
		
		deleteTask: function()
		{
			var selectedTask = this.tasksList.getSelectedItem();
			
			this.tasksList.getDataProvider().removeItem( selectedTask );
			this.itemNameTi.setText("");
		},
		
		onDeleteTask: function( msg )
		{
			this.tasksList.getDataProvider().removeItem( msg.task );
			this.itemNameTi.setText("");
		}
		
	</JavaScript>
	
</View>